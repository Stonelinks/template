"""
This type stub file was generated by pyright.
"""

import abc
from cryptography import utils
from cryptography.exceptions import UnsupportedAlgorithm, _Reasons
from cryptography.hazmat.primitives._cipheralgorithm import BlockCipherAlgorithm, CipherAlgorithm
from cryptography.hazmat.primitives.ciphers import algorithms

class Mode(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def name(self) -> str:
        """
        A string naming this mode (e.g. "ECB", "CBC").
        """
        ...
    
    @abc.abstractmethod
    def validate_for_algorithm(self, algorithm: CipherAlgorithm) -> None:
        """
        Checks that all the necessary invariants of this (mode, algorithm)
        combination are met.
        """
        ...
    


class ModeWithInitializationVector(Mode, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def initialization_vector(self) -> utils.Buffer:
        """
        The value of the initialization vector for this mode as bytes.
        """
        ...
    


class ModeWithTweak(Mode, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def tweak(self) -> utils.Buffer:
        """
        The value of the tweak for this mode as bytes.
        """
        ...
    


class ModeWithNonce(Mode, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def nonce(self) -> utils.Buffer:
        """
        The value of the nonce for this mode as bytes.
        """
        ...
    


class ModeWithAuthenticationTag(Mode, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def tag(self) -> bytes | None:
        """
        The value of the tag supplied to the constructor of this mode.
        """
        ...
    


class CBC(ModeWithInitializationVector):
    name = ...
    def __init__(self, initialization_vector: utils.Buffer) -> None:
        ...
    
    @property
    def initialization_vector(self) -> utils.Buffer:
        ...
    
    validate_for_algorithm = ...


class XTS(ModeWithTweak):
    name = ...
    def __init__(self, tweak: utils.Buffer) -> None:
        ...
    
    @property
    def tweak(self) -> utils.Buffer:
        ...
    
    def validate_for_algorithm(self, algorithm: CipherAlgorithm) -> None:
        ...
    


class ECB(Mode):
    name = ...
    validate_for_algorithm = ...


class OFB(ModeWithInitializationVector):
    name = ...
    def __init__(self, initialization_vector: utils.Buffer) -> None:
        ...
    
    @property
    def initialization_vector(self) -> utils.Buffer:
        ...
    
    validate_for_algorithm = ...


class CFB(ModeWithInitializationVector):
    name = ...
    def __init__(self, initialization_vector: utils.Buffer) -> None:
        ...
    
    @property
    def initialization_vector(self) -> utils.Buffer:
        ...
    
    validate_for_algorithm = ...


class CFB8(ModeWithInitializationVector):
    name = ...
    def __init__(self, initialization_vector: utils.Buffer) -> None:
        ...
    
    @property
    def initialization_vector(self) -> utils.Buffer:
        ...
    
    validate_for_algorithm = ...


class CTR(ModeWithNonce):
    name = ...
    def __init__(self, nonce: utils.Buffer) -> None:
        ...
    
    @property
    def nonce(self) -> utils.Buffer:
        ...
    
    def validate_for_algorithm(self, algorithm: CipherAlgorithm) -> None:
        ...
    


class GCM(ModeWithInitializationVector, ModeWithAuthenticationTag):
    name = ...
    _MAX_ENCRYPTED_BYTES = ...
    _MAX_AAD_BYTES = ...
    def __init__(self, initialization_vector: utils.Buffer, tag: bytes | None = ..., min_tag_length: int = ...) -> None:
        ...
    
    @property
    def tag(self) -> bytes | None:
        ...
    
    @property
    def initialization_vector(self) -> utils.Buffer:
        ...
    
    def validate_for_algorithm(self, algorithm: CipherAlgorithm) -> None:
        ...
    


