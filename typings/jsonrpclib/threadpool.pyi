"""
This type stub file was generated by pyright.
"""

"""
Cached thread pool, inspired from Pelix/iPOPO Thread Pool

:author: Thomas Calmant
:copyright: Copyright 2025, Thomas Calmant
:license: Apache License 2.0
:version: 0.4.3.4

..

    Copyright 2025 Thomas Calmant

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
__version_info__ = ...
__version__ = ...
__docformat__ = ...
class EventData:
    """
    A threading event with some associated data
    """
    def __init__(self) -> None:
        """
        Sets up the event
        """
        ...
    
    @property
    def data(self): # -> None:
        """
        Returns the associated value
        """
        ...
    
    @property
    def exception(self): # -> None:
        """
        Returns the exception used to stop the wait() method
        """
        ...
    
    def clear(self): # -> None:
        """
        Clears the event
        """
        ...
    
    def is_set(self): # -> bool:
        """
        Checks if the event is set
        """
        ...
    
    def set(self, data=...): # -> None:
        """
        Sets the event
        """
        ...
    
    def raise_exception(self, exception): # -> None:
        """
        Raises an exception in wait()

        :param exception: An Exception object
        """
        ...
    
    def wait(self, timeout=...): # -> bool:
        """
        Waits for the event or for the timeout

        :param timeout: Wait timeout (in seconds)
        :return: True if the event as been set, else False
        """
        ...
    


class FutureResult:
    """
    An object to wait for the result of a threaded execution
    """
    def __init__(self, logger=...) -> None:
        """
        Sets up the FutureResult object

        :param logger: The Logger to use in case of error (optional)
        """
        ...
    
    def set_callback(self, method, extra=...): # -> None:
        """
        Sets a callback method, called once the result has been computed or in
        case of exception.

        The callback method must have the following signature:
        ``callback(result, exception, extra)``.

        :param method: The method to call back in the end of the execution
        :param extra: Extra parameter to be given to the callback method
        """
        ...
    
    def execute(self, method, args, kwargs): # -> None:
        """
        Execute the given method and stores its result.
        The result is considered "done" even if the method raises an exception

        :param method: The method to execute
        :param args: Method positional arguments
        :param kwargs: Method keyword arguments
        :raise Exception: The exception raised by the method
        """
        ...
    
    def done(self): # -> bool:
        """
        Returns True if the job has finished, else False
        """
        ...
    
    def result(self, timeout=...): # -> None:
        """
        Waits up to timeout for the result the threaded job.
        Returns immediately the result if the job has already been done.

        :param timeout: The maximum time to wait for a result (in seconds)
        :raise OSError: The timeout raised before the job finished
        :raise Exception: The exception encountered during the call, if any
        """
        ...
    


class ThreadPool:
    """
    Executes the tasks stored in a FIFO in a thread pool
    """
    def __init__(self, max_threads, min_threads=..., queue_size=..., timeout=..., logname=...) -> None:
        """
        Sets up the thread pool.

        Threads are kept alive 60 seconds (timeout argument).

        :param max_threads: Maximum size of the thread pool
        :param min_threads: Minimum size of the thread pool
        :param queue_size: Size of the task queue (0 for infinite)
        :param timeout: Queue timeout (in seconds, 60s by default)
        :param logname: Name of the logger
        :raise ValueError: Invalid number of threads
        """
        ...
    
    def start(self): # -> None:
        """
        Starts the thread pool. Does nothing if the pool is already started.
        """
        ...
    
    def stop(self): # -> None:
        """
        Stops the thread pool. Does nothing if the pool is already stopped.
        """
        ...
    
    def enqueue(self, method, *args, **kwargs): # -> FutureResult:
        """
        Queues a task in the pool

        :param method: Method to call
        :return: A FutureResult object, to get the result of the task
        :raise ValueError: Invalid method
        :raise Full: The task queue is full
        """
        ...
    
    def clear(self): # -> None:
        """
        Empties the current queue content.
        Returns once the queue have been emptied.
        """
        ...
    
    def join(self, timeout=...): # -> bool:
        """
        Waits for all the tasks to be executed

        :param timeout: Maximum time to wait (in seconds)
        :return: True if the queue has been emptied, else False
        """
        ...
    


