"""
This type stub file was generated by pyright.
"""

import socketserver

"""
Defines a request dispatcher, a HTTP request handler, a HTTP server and a
CGI request handler.

:authors: Josh Marshall, Thomas Calmant
:copyright: Copyright 2025, Thomas Calmant
:license: Apache License 2.0
:version: 0.4.3.4

..

    Copyright 2025 Thomas Calmant

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
SimpleXMLRPCDispatcher = ...
SimpleXMLRPCRequestHandler = ...
CGIXMLRPCRequestHandler = ...
resolve_dotted_attribute = ...
_AF_UNIX = ...
__version_info__ = ...
__version__ = ...
__docformat__ = ...
_logger = ...
def get_version(request): # -> float | None:
    """
    Computes the JSON-RPC version

    :param request: A request dictionary
    :return: The JSON-RPC version or None
    """
    ...

def validate_request(request, json_config): # -> Fault | Literal[True]:
    """
    Validates the format of a request dictionary

    :param request: A request dictionary
    :param json_config: A JSONRPClib Config instance
    :return: True if the dictionary is valid, else a Fault object
    """
    ...

class NoMulticallResult(Exception):
    """
    No result in multicall
    """
    ...


class SimpleJSONRPCDispatcher(SimpleXMLRPCDispatcher):
    """
    Mix-in class that dispatches JSON-RPC requests.

    This class is used to register JSON-RPC method handlers
    and then to dispatch them. This class doesn't need to be
    instanced directly when used by SimpleJSONRPCServer.
    """
    def __init__(self, encoding=..., config=...) -> None:
        """
        Sets up the dispatcher with the given encoding.
        None values are allowed.
        """
        ...
    
    def set_notification_pool(self, thread_pool): # -> None:
        """
        Sets the thread pool to use to handle notifications
        """
        ...
    


class SimpleJSONRPCRequestHandler(SimpleXMLRPCRequestHandler):
    """
    HTTP request handler.

    The server that receives the requests must have a json_config member,
    containing a JSONRPClib Config instance
    """
    def do_POST(self): # -> None:
        """
        Handles POST requests
        """
        ...
    


class SimpleJSONRPCServer(socketserver.TCPServer, SimpleJSONRPCDispatcher):
    """
    JSON-RPC server (and dispatcher)
    """
    allow_reuse_address = ...
    def __init__(self, addr, requestHandler=..., logRequests=..., encoding=..., bind_and_activate=..., address_family=..., config=...) -> None:
        """
        Sets up the server and the dispatcher

        :param addr: The server listening address
        :param requestHandler: Custom request handler
        :param logRequests: Flag to(de)activate requests logging
        :param encoding: The dispatcher request encoding
        :param bind_and_activate: If True, starts the server immediately
        :param address_family: The server listening address family
        :param config: A JSONRPClib Config instance
        """
        class RequestHandlerWrapper(requestHandler):
            """
            Wraps the request handle to have access to the configuration
            """
            ...
        
        
    


class PooledJSONRPCServer(socketserver.ThreadingMixIn, SimpleJSONRPCServer):
    """
    JSON-RPC server based on a thread pool
    """
    def __init__(self, addr, requestHandler=..., logRequests=..., encoding=..., bind_and_activate=..., address_family=..., config=..., thread_pool=...) -> None:
        """
        Sets up the server and the dispatcher

        :param addr: The server listening address
        :param requestHandler: Custom request handler
        :param logRequests: Flag to(de)activate requests logging
        :param encoding: The dispatcher request encoding
        :param bind_and_activate: If True, starts the server immediately
        :param address_family: The server listening address family
        :param config: A JSONRPClib Config instance
        :param thread_pool: A ThreadPool object. The pool must be started.
        """
        ...
    
    def process_request(self, request, client_address): # -> None:
        """
        Handle a client request: queue it in the thread pool
        """
        ...
    
    def server_close(self): # -> None:
        """
        Clean up the server
        """
        ...
    


class CGIJSONRPCRequestHandler(SimpleJSONRPCDispatcher, CGIXMLRPCRequestHandler):
    """
    JSON-RPC CGI handler (and dispatcher)
    """
    def __init__(self, encoding=..., config=...) -> None:
        """
        Sets up the dispatcher

        :param encoding: Dispatcher encoding
        :param config: A JSONRPClib Config instance
        """
        ...
    
    def handle_jsonrpc(self, request_text): # -> None:
        """
        Handle a JSON-RPC request
        """
        ...
    
    handle_xmlrpc = ...


