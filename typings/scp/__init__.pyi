"""
This type stub file was generated by pyright.
"""

import locale
import os
import re
import pathlib
import paramiko.transport
from socket import timeout as SocketTimeout
from typing import AnyStr, Callable, IO, Iterable, Optional, TYPE_CHECKING, Tuple, Union

"""
Utilities for sending files over ssh using the scp1 protocol.
"""
__version__ = ...
SCP_COMMAND = ...
PATH_TYPES = ...
if TYPE_CHECKING:
    ...
PurePath = pathlib.PurePath
PathTypes = Union[str, bytes, PurePath]
_find_unsafe = ...
def asbytes(s): # -> bytes:
    """Turns unicode into bytes, if needed.

    Assumes UTF-8.
    """
    ...

def asunicode(s): # -> str:
    """Turns bytes into unicode, if needed.

    Uses UTF-8.
    """
    ...

bytes_sep = ...
def asunicode_win(s): # -> str:
    """Turns bytes into unicode, if needed.
    """
    ...

class SCPClient:
    """
    An scp1 implementation, compatible with openssh scp.
    Raises SCPException for all transport related errors. Local filesystem
    and OS errors pass through.

    Main public methods are .put and .get
    The get method is controlled by the remote scp instance, and behaves
    accordingly. This means that symlinks are resolved, and the transfer is
    halted after too many levels of symlinks are detected.
    The put method uses os.walk for recursion, and sends files accordingly.
    Since scp doesn't support symlinks, we send file symlinks as the file
    (matching scp behaviour), but we make no attempt at symlinked directories.
    """
    def __init__(self, transport: paramiko.transport.Transport, buff_size: int = ..., socket_timeout: float = ..., progress: Optional[Callable[[bytes, int, int], None]] = ..., progress4: Optional[Callable[[bytes, int, int, Tuple[str, int]], None]] = ..., sanitize: Callable[[bytes], bytes] = ..., limit_bw=...) -> None:
        """
        Create an scp1 client.

        @param transport: an existing paramiko L{Transport}
        @type transport: L{Transport}
        @param buff_size: size of the scp send buffer.
        @type buff_size: int
        @param socket_timeout: channel socket timeout in seconds
        @type socket_timeout: float
        @param progress: callback - called with (filename, size, sent) during
            transfers
        @param progress4: callback - called with (filename, size, sent, peername)
            during transfers. peername is a tuple contains (IP, PORT)
        @param sanitize: function - called with filename, should return
            safe or escaped string. Uses _sh_quote by default. Set to ``False``
            to disable.
        @type progress: function(string, int, int, tuple)
        @limit_bw: limits the bandwidth used on the connection in Kbps. Must be integer positive.
            the default value None does not limit the bandwidth.
        @type limit_bw: Optional[int]
        """
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, type, value, traceback): # -> None:
        ...
    
    def put(self, files: Union[PathTypes, Iterable[PathTypes]], remote_path: Union[str, bytes] = ..., recursive: bool = ..., preserve_times: bool = ...) -> None:
        """
        Transfer files and directories to remote host.

        @param files: A single path, or a list of paths to be transferred.
            recursive must be True to transfer directories.
        @type files: string OR list of strings
        @param remote_path: path in which to receive the files on the remote
            host. defaults to '.'
        @type remote_path: str
        @param recursive: transfer files and directories recursively
        @type recursive: bool
        @param preserve_times: preserve mtime and atime of transferred files
            and directories.
        @type preserve_times: bool
        """
        ...
    
    def putfo(self, fl: IO[AnyStr], remote_path: Union[str, bytes], mode: Union[str, bytes] = ..., size: Optional[int] = ...) -> None:
        """
        Transfer file-like object to remote host.

        @param fl: opened file or file-like object to copy
        @type fl: file-like object
        @param remote_path: full destination path
        @type remote_path: str
        @param mode: permissions (posix-style) for the uploaded file
        @type mode: str
        @param size: size of the file in bytes. If ``None``, the size will be
            computed using `seek()` and `tell()`.
        """
        ...
    
    def get(self, remote_path: PathTypes, local_path: Union[str, bytes] = ..., recursive: bool = ..., preserve_times: bool = ...) -> None:
        """
        Transfer files and directories from remote host to localhost.

        @param remote_path: path to retrieve from remote host. Note that
            wildcards will be escaped unless you changed the `sanitize`
            function.
        @type remote_path: str
        @param local_path: path in which to receive files locally
        @type local_path: str
        @param recursive: transfer files and directories recursively
        @type recursive: bool
        @param preserve_times: preserve mtime and atime of transferred files
            and directories.
        @type preserve_times: bool
        """
        ...
    
    def close(self): # -> None:
        """close scp channel"""
        ...
    


class SCPException(Exception):
    """SCP exception class"""
    ...


def put(transport: paramiko.transport.Transport, files: Union[PathTypes, Iterable[PathTypes]], remote_path: Union[str, bytes] = ..., recursive: bool = ..., preserve_times: bool = ...) -> None:
    """
    Transfer files and directories to remote host.

    This is a convenience function that creates a SCPClient from the given
    transport and closes it at the end, useful for one-off transfers.

    @param files: A single path, or a list of paths to be transferred.
        recursive must be True to transfer directories.
    @type files: string OR list of strings
    @param remote_path: path in which to receive the files on the remote host.
        defaults to '.'
    @type remote_path: str
    @param recursive: transfer files and directories recursively
    @type recursive: bool
    @param preserve_times: preserve mtime and atime of transferred files and
        directories.
    @type preserve_times: bool
    """
    ...

def get(transport: paramiko.transport.Transport, remote_path: PathTypes, local_path: Union[str, bytes] = ..., recursive: bool = ..., preserve_times: bool = ...) -> None:
    """
    Transfer files and directories from remote host to localhost.

    This is a convenience function that creates a SCPClient from the given
    transport and closes it at the end, useful for one-off transfers.

    @param transport: an paramiko L{Transport}
    @type transport: L{Transport}
    @param remote_path: path to retrieve from remote host. Note that wildcards
        will be escaped unless you changed the `sanitize` function.
    @type remote_path: str
    @param local_path: path in which to receive files locally
    @type local_path: str
    @param recursive: transfer files and directories recursively
    @type recursive: bool
    @param preserve_times: preserve mtime and atime of transferred files
        and directories.
    @type preserve_times: bool
    """
    ...

